#include <iostream>
#include <stdlib.h>
#include <ros/ros.h>
#include <sensor_msgs/Imu.h>
#include <std_msgs/String.h>
#include <Eigen/Dense>
#include <cmath>
#include <boost/thread.hpp>
#include <visualization_msgs/Marker.h>
#define t 0.005

using namespace Eigen;
using namespace std;
float G_x;
float G_y;
float G_z;
float A_x;
float A_y;
float A_z;
//float vg;
//float sg;
//float vb;
//float sb;

Matrix<float, 3, 3> C;
//C.setIdentity();
Matrix<float, 3, 3> C1;
//C1.setZero();
Matrix<float, 3, 3> I;
//I.setIdentity();
Matrix<float, 3, 3> B;
//B.setZero();
double sigma;
//sigma.setZero();
Matrix<float, 3, 1> gg;
//gg.setZero();
Matrix<float, 3, 1> wb;
//wb.setZero();
Matrix<float, 3, 1> vg;
Matrix<float, 3, 1> ab;
//ab.setZero();
Matrix<float, 3, 1> ag;
//ag.setZero();
Matrix<float, 3, 1> sg;
//sg.setZero();

void chatterCallback(const sensor_msgs::Imu::ConstPtr& msg)
{
  int cnt = 0; 

  G_x = msg->angular_velocity.x;
  G_y = msg->angular_velocity.y;
  G_z = msg->angular_velocity.z;
  A_x = msg->linear_acceleration.x;
  A_y = msg->linear_acceleration.y;
  A_z = msg->linear_acceleration.z;
  
  if (cnt == 0){
    gg << A_x,A_y,A_z;
  }

  wb << G_x,G_y,G_z;

  sigma = sqrt(wb.transpose()*wb)*t;
  //Matrix<float, 3, 1> LA; 
  
  B << 0,-G_z*t,G_y*t,
       G_z*t,0,-G_x*t,
       -G_y*t,G_x*t,0;

  C = C*(I + sin(sigma/sigma)*B + (1-cos(sigma))/(sigma*sigma)*B*B);

  ab << A_x,A_y,A_z;
  ag = C * ab; 
  vg = vg + t*(ag-gg);
  sg = sg + t*vg;

}

int main(int argc, char **argv){

  C.setIdentity();
  C1.setZero();
  I.setIdentity();
  B.setZero();
  gg.setZero();
  vg.setZero();
  wb.setZero();
  ab.setZero();
  ag.setZero();
  sg.setZero();

  ros::init(argc, argv, "IMU");
  ros::NodeHandle nh;
  ros::Subscriber sub = nh.subscribe("/imu/data", 1000, chatterCallback);

  ros::Publisher marker_pub = nh.advertise<visualization_msgs::Marker>("visualization_marker", 10);


  ros::Rate r(30);

  float f = 0.0;
  while (ros::ok())
  {

    visualization_msgs::Marker points, line_strip, line_list;
    points.header.frame_id = line_strip.header.frame_id = line_list.header.frame_id = "/my";
    points.header.stamp = line_strip.header.stamp = line_list.header.stamp = ros::Time::now();
    points.ns = line_strip.ns = line_list.ns = "points_and_lines";
    points.action = line_strip.action = line_list.action = visualization_msgs::Marker::ADD;
    points.pose.orientation.w = line_strip.pose.orientation.w = line_list.pose.orientation.w = 1.0;

    points.id = 0;
    line_strip.id = 1;
    line_list.id = 2;

    points.type = visualization_msgs::Marker::POINTS;
    line_strip.type = visualization_msgs::Marker::LINE_STRIP;
    line_list.type = visualization_msgs::Marker::LINE_LIST;

    // POINTS markers use x and y scale for width/height respectively
    points.scale.x = 0.2;
    points.scale.y = 0.2;

    // LINE_STRIP/LINE_LIST markers use only the x component of scale, for the line width
    line_strip.scale.x = 0.1;
    line_list.scale.x = 0.1;

    // Points are green
    points.color.g = 1.0f;
    points.color.a = 1.0;

    // Line strip is blue
    line_strip.color.b = 1.0;
    line_strip.color.a = 1.0;

    // Line list is red
    line_list.color.r = 1.0;
    line_list.color.a = 1.0;

    // Create the vertices for the points and lines
    for (uint32_t i = 0; i < 100; ++i)
    {
      float y = 5 * sin(f + i / 100.0f * 2 * M_PI);
      float z = 5 * cos(f + i / 100.0f * 2 * M_PI);

      geometry_msgs::Point p;
      p.x = vg(0,0);
      p.y = vg(1,0);
      p.z = vg(2,0);

      points.points.push_back(p);
      line_strip.points.push_back(p);

      // The line list needs two points for each line
      //line_list.points.push_back(p);
      p.z += 1.0;
      line_list.points.push_back(p);
    }

    //marker_pub.publish(points);
    marker_pub.publish(line_strip);
    //marker_pub.publish(line_list);

    r.sleep();

    f += 0.04;
  }
  
  ros::spin();
}
